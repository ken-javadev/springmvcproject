/*
 * Created on 20 Jun 2017 ( Time 16:54:38 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.gvpt.admintool.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.gvpt.admintool.bean.AccessRole;
import com.gvpt.admintool.bean.UserAdmin;
import com.gvpt.admintool.bean.jpa.AccessRoleEntity;
import com.gvpt.admintool.bean.jpa.UserAdminEntity;

import java.util.Date;
import java.util.List;

import com.gvpt.admintool.business.service.AccessRoleService;
import com.gvpt.admintool.business.service.UserAdminService;
import com.gvpt.admintool.business.service.mapping.UserAdminServiceMapper;
import com.gvpt.admintool.business.service.mapping.UserServiceMapper;
import com.gvpt.admintool.common.util.PasswordUtil;
import com.gvpt.admintool.data.repository.jpa.AccessRoleJpaRepository;
import com.gvpt.admintool.data.repository.jpa.UserAdminJpaRepository;
import com.gvpt.admintool.data.repository.jpa.UserAdminSpecRepository;
import com.gvpt.admintool.data.repository.jpa.UserJpaRepository;
import com.gvpt.admintool.data.repository.jpa.UserSpecRepository;
import com.gvpt.admintool.data.repository.specifications.UserAdminSpecifications;
import com.gvpt.admintool.data.repository.specifications.UserSpecifications;
import com.gvpt.admintool.web.common.enumerations.AppConstants;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of UserAdminService
 */
@Component
@Transactional
public class UserAdminServiceImpl implements UserAdminService {

	@Resource
	private UserJpaRepository userJpaRepository;

	@Resource
	private UserSpecRepository userSpecRepository;
	
	@Resource
	private AccessRoleService accessRoleService;

	@Resource
	private UserServiceMapper userServiceMapper;
	
	
	
	public UserAdmin findById(String userId) {
		UserAdminEntity userEntity = userJpaRepository.findOne(userId);
		return userServiceMapper.mapUserEntityToUser(userEntity);
	}

	
	public List<UserAdmin> findAll() {
		Iterable<UserAdminEntity> entities = userJpaRepository.findAll();
		List<UserAdmin> beans = new ArrayList<UserAdmin>();
		for(UserAdminEntity userEntity : entities) {
			beans.add(userServiceMapper.mapUserEntityToUser(userEntity));
		}
		return beans;
	}

	
	public UserAdmin save(UserAdmin user) {
		return update(user) ;
	}

	
	public UserAdmin create(UserAdmin user) {
		UserAdminEntity userEntity = userJpaRepository.findOne(user.getUserId());
		if( userEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		userEntity = new UserAdminEntity();
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		userEntity.setPassword(PasswordUtil.generateEncryptPasswords(user.getPassword()));
		UserAdminEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
	}

	
	public UserAdmin update(UserAdmin user) {
		UserAdminEntity userEntity = new UserAdminEntity();
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		UserAdminEntity userEntitySaved = userJpaRepository.save(userEntity);
		userEntity.setPassword(PasswordUtil.generateEncryptPasswords(user.getPassword()));
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
	}

	
	public void delete(String userId) {
		userJpaRepository.delete(userId);
	}

	public UserJpaRepository getUserJpaRepository() {
		return userJpaRepository;
	}

	public void setUserJpaRepository(UserJpaRepository userJpaRepository) {
		this.userJpaRepository = userJpaRepository;
	}

	public UserServiceMapper getUserServiceMapper() {
		return userServiceMapper;
	}

	public void setUserServiceMapper(UserServiceMapper userServiceMapper) {
		this.userServiceMapper = userServiceMapper;
	}

	public Long countAll() {
		return userJpaRepository.count();
	}

	public List<UserAdmin> findAll(Pageable pageable) {
		List<UserAdmin> result = new ArrayList<UserAdmin>();
		Page<UserAdminEntity> entities = userJpaRepository.findAll(pageable);
		for(UserAdminEntity userEntity : entities) {
			result.add(userServiceMapper.mapUserEntityToUser(userEntity));
		}
		return result;
	}

	@Override
	public UserAdmin getUserByEmail(String email) {
		UserAdminEntity userEntity = userJpaRepository.findOneByEmail(email);
		return userServiceMapper.mapUserEntityToUser(userEntity);
	}

	@Override
	public List<UserAdmin> findWithSpec(UserAdminSpecifications specifications,
			Pageable pageable) {
		List<UserAdmin> result = new ArrayList<UserAdmin>();
		Page<UserAdminEntity> entities = userSpecRepository.findAll(specifications, pageable);
		for(UserAdminEntity userEntity : entities) {
			result.add(userServiceMapper.mapUserEntityToUser(userEntity));
		}
		return result;
	}


	@Override
	public Long countWithSpec(UserAdminSpecifications specifications) {
		return userSpecRepository.count(specifications);
	}


	@Override
	public UserAdmin getUserByID(String id) {
		UserAdminEntity userEntity = userJpaRepository.findOneByIDandStatus(id, AppConstants.ACTIVE);
		return userServiceMapper.mapUserEntityToUser(userEntity);
	}


	@Override
	public UserAdmin findOneByIDandStatus(String userId, Long status) {
		UserAdminEntity userEntity = userJpaRepository.findOneByIDandStatus(userId, status);
		return userServiceMapper.mapUserEntityToUser(userEntity);
	}


	@Override
	public UserAdmin updateStatus(UserAdmin entity) {
		UserAdminEntity userEntity = new UserAdminEntity();
		userServiceMapper.mapUserToUserEntity(entity, userEntity);
		UserAdminEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
	}


}
