/*
 * Created on 20 Jun 2017 ( Time 10:19:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.gvpt.admintool.business.service.impl;

import com.gvpt.admintool.bean.AccessRight;
import com.gvpt.admintool.bean.jpa.AccessRightEntity;
import com.gvpt.admintool.business.service.AccessRightService;
import com.gvpt.admintool.business.service.mapping.AccessRightServiceMapper;
import com.gvpt.admintool.data.repository.jpa.AccessRightJpaRepository;
import com.gvpt.admintool.data.repository.jpa.AccessRightSpecRepository;
import com.gvpt.admintool.data.repository.specifications.AccessRightSpecifications;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;

/**
 * Implementation of AccessRightService
 */
@Component
@Transactional
public class AccessRightServiceImpl implements AccessRightService {

	@Resource
	private AccessRightJpaRepository accessRightJpaRepository;

	@Resource
	private AccessRightSpecRepository accessRightSpecRepository;

	@Resource
	private AccessRightServiceMapper accessRightServiceMapper;
	
	
	public AccessRight findById(Long accessRightId) {
		AccessRightEntity accessRightEntity = accessRightJpaRepository.findOne(accessRightId);
		return accessRightServiceMapper.mapAccessRightEntityToAccessRight(accessRightEntity);
	}

	
	public List<AccessRight> findAll() {
		Iterable<AccessRightEntity> entities = accessRightJpaRepository.findAll();
		List<AccessRight> beans = new ArrayList<AccessRight>();
		for(AccessRightEntity accessRightEntity : entities) {
			beans.add(accessRightServiceMapper.mapAccessRightEntityToAccessRight(accessRightEntity));
		}
		return beans;
	}

	
	public AccessRight save(AccessRight accessRight) {
		return update(accessRight) ;
	}

	
	public AccessRight create(AccessRight accessRight) {
		AccessRightEntity accessRightEntity = accessRightJpaRepository.findOne(accessRight.getAccessRightId());
		if( accessRightEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		accessRightEntity = new AccessRightEntity();
		accessRightServiceMapper.mapAccessRightToAccessRightEntity(accessRight, accessRightEntity);
		AccessRightEntity accessRightEntitySaved = accessRightJpaRepository.save(accessRightEntity);
		return accessRightServiceMapper.mapAccessRightEntityToAccessRight(accessRightEntitySaved);
	}

	
	public AccessRight update(AccessRight accessRight) {
		AccessRightEntity accessRightEntity = accessRightJpaRepository.findOne(accessRight.getAccessRightId());
		accessRightServiceMapper.mapAccessRightToAccessRightEntity(accessRight, accessRightEntity);
		AccessRightEntity accessRightEntitySaved = accessRightJpaRepository.save(accessRightEntity);
		return accessRightServiceMapper.mapAccessRightEntityToAccessRight(accessRightEntitySaved);
	}

	
	public void delete(Long accessRightId) {
		accessRightJpaRepository.delete(accessRightId);
	}

	public AccessRightJpaRepository getAccessRightJpaRepository() {
		return accessRightJpaRepository;
	}

	public void setAccessRightJpaRepository(AccessRightJpaRepository accessRightJpaRepository) {
		this.accessRightJpaRepository = accessRightJpaRepository;
	}

	public AccessRightServiceMapper getAccessRightServiceMapper() {
		return accessRightServiceMapper;
	}

	public void setAccessRightServiceMapper(AccessRightServiceMapper accessRightServiceMapper) {
		this.accessRightServiceMapper = accessRightServiceMapper;
	}

	public Long countAll() {
		return accessRightJpaRepository.count();
	}

	public List<AccessRight> findAll(Pageable pageable) {
		List<AccessRight> result = new ArrayList<AccessRight>();
		Page<AccessRightEntity> entities = accessRightJpaRepository.findAll(pageable);
		for(AccessRightEntity accessRightEntity : entities) {
			result.add(accessRightServiceMapper.mapAccessRightEntityToAccessRight(accessRightEntity));
		}
		return result;
	}

	public List<AccessRight> findWithSpec(AccessRightSpecifications specifications, Pageable pageable){
		List<AccessRight> result = new ArrayList<AccessRight>();
		Page<AccessRightEntity> entities = accessRightSpecRepository.findAll(specifications, pageable);
		for(AccessRightEntity accessRightEntity : entities) {
			result.add(accessRightServiceMapper.mapAccessRightEntityToAccessRight(accessRightEntity));
		}
		return result;
	}

	public Long countWithSpec(AccessRightSpecifications specifications){
		return accessRightSpecRepository.count(specifications);
	}


	@Override
	public List<AccessRight> findAllOrderById() {
		List<AccessRight> result = new ArrayList<AccessRight>();
		List<AccessRightEntity> entities = accessRightJpaRepository.findAllOrderByID();
		for(AccessRightEntity accessRightEntity : entities) {
			result.add(accessRightServiceMapper.mapAccessRightEntityToAccessRight(accessRightEntity));
		}
		return result;
	}
}
