/*
 * Created on 20 Jun 2017 ( Time 11:34:48 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package com.gvpt.admintool.business.service.impl;


import com.gvpt.admintool.bean.AccessRight;
import com.gvpt.admintool.bean.AccessRole;
import com.gvpt.admintool.bean.UserAdmin;
import com.gvpt.admintool.bean.auth.SessionModel;
import com.gvpt.admintool.bean.auth.UserPrincipal;
import com.gvpt.admintool.business.service.LoginService;
import com.gvpt.admintool.business.service.UserAdminService;
import com.gvpt.admintool.common.util.PasswordUtil;
import com.gvpt.admintool.data.repository.jpa.AccessRoleJpaRepository;
import com.gvpt.admintool.web.common.enumerations.AppConstants;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.GrantedAuthorityImpl;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


/**
 * Keys constants.
 * 
 * @author Telosys Tools Generator by cxrus
 *
 */
@Service
@Transactional()
public class LoginServiceImpl implements LoginService, UserDetailsService {
	@Autowired
	private PasswordUtil passwordUtil;
	@Autowired
	private UserAdminService userService;
	@Resource
	private AccessRoleJpaRepository roleJpa;

	private static Logger log = LoggerFactory.getLogger(LoginServiceImpl.class);
	private static List<GrantedAuthority> AUTHORITIES = new ArrayList<GrantedAuthority>();

	static {
		AUTHORITIES.add(new GrantedAuthorityImpl("MEMBER"));
	}

	
	@Transactional(readOnly = false)
	public boolean changePassword(String id, String newPassword) {

		UserAdmin user = userService.getUserByID(id);

		user.setPassword(passwordUtil.generateEncryptPasswords(newPassword));

		userService.update(user);

		return true;
	}

	
	@Transactional(readOnly = false)
	public boolean resetPassword(String id, String newPassword) {

		UserAdmin user = userService.getUserByID(id);
		user.setPassword(passwordUtil.generateEncryptPasswords(newPassword));
//		user.setActive(true);
//		user.setEmailVerified(true);
		userService.update(user);

		return true;
	}

	
	public boolean checkFirstLogin(String id) {

		UserAdmin user = userService.getUserByID(id);

//		if (!user.getEmailVerified())
//			return true;

		return false;
	}

	public UserDetails loadUserByUsername(String id)
			throws UsernameNotFoundException {

		UserAdmin domainUser = userService.findOneByIDandStatus(id,AppConstants.ACTIVE);
		if (domainUser == null) {
            throw new UsernameNotFoundException(id);
        }
        return new UserPrincipal(domainUser);
		
	}

	public Collection<? extends GrantedAuthority> getAuthorities(UserAdmin user) {
		List<GrantedAuthority> authList = getGrantedAuthorities(getAccessRight(user));
		return authList;
	}

	public List<String> getAccessRight(UserAdmin user) {

		List<String> userRights = new ArrayList<String>();
		AccessRole accessRole = user.getAccessRole();
		for (AccessRight ar : accessRole.getListOfAccessRight()) {
			userRights.add(ar.getAccessRightId().toString());
		}
		return userRights;
	}

	public static List<GrantedAuthority> getGrantedAuthorities(
			List<String> roles) {
		List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();

		for (String role : roles) {
			authorities.add(new SimpleGrantedAuthority(role));
		}
		return authorities;
	}

	public boolean checkPasswordById(String email, String password) {

		UserAdmin user = userService.getUserByEmail(email);

		if (passwordUtil.checkPassword(password, user.getPassword()))
			return true;

		return false;
	}

	
	public void logout(BigDecimal id) {
		AUTHORITIES = new ArrayList<GrantedAuthority>();
		AUTHORITIES.clear();

	}


}
