
/*
 * Created on 20 Jun 2017 ( Time 16:54:38 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.gvpt.admintool.web.controller;

import com.gvpt.admintool.bean.AccessRole;
import com.gvpt.admintool.bean.AuditTrail;
import com.gvpt.admintool.bean.UserAdmin;
import com.gvpt.admintool.business.service.AccessRoleService;
import com.gvpt.admintool.business.service.AuditTrailService;
import com.gvpt.admintool.business.service.UserAdminService;
import com.gvpt.admintool.common.util.CommonUtils;
import com.gvpt.admintool.common.util.PasswordUtil;
import com.gvpt.admintool.data.repository.specifications.UserAdminSpecifications;
import com.gvpt.admintool.web.common.AbstractController;
import com.gvpt.admintool.web.common.FormMode;
import com.gvpt.admintool.web.common.Message;
import com.gvpt.admintool.web.common.MessageType;
import com.gvpt.admintool.web.common.enumerations.AppConstants;
import com.gvpt.admintool.web.common.enumerations.UserActivity;
import com.gvpt.admintool.web.datatable.commons.DataTableRequest;
import com.gvpt.admintool.web.datatable.commons.DataTableResponse;
import com.gvpt.admintool.web.datatable.enumerations.UserAdminIndexEnum;
import com.gvpt.admintool.web.listitem.AccessRoleListItem;
import com.gvpt.admintool.web.util.ParamUtil;
import org.apache.commons.lang.exception.ExceptionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.annotation.Resource;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.io.IOException;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

//--- Entities
//--- Services
//--- Common classes
//-- Datatable



/**
 * Spring MVC controller for 'UserAdmin' management.
 */
@Controller
@RequestMapping("/userAdmin")
public class UserAdminController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "userAdmin";
	private static final String MAIN_LIST_NAME   = "list";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM   = "userAdmin/form";
	private static final String JSP_LIST   = "userAdmin/list";

	//--- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE   = "/userAdmin/create";
	private static final String SAVE_ACTION_UPDATE   = "/userAdmin/update";

	//--- Main entity service
	@Resource
    private UserAdminService userAdminService; // Injected by Spring
	@Resource
    private AccessRoleService accessRoleService; 
	@Resource
    private UserAdminService userService;
	
	@Autowired
	NavigationController navigation;
	
	@Autowired
	CommonUtils commonUtils;
	
	@Autowired
	AuditTrailService auditService;
	
	@Value("${ipAddress.isforwardedOn}")
	private boolean isForwardedOn;

	public UserAdminController() {
		super(UserAdminController.class, MAIN_ENTITY_NAME );
		log("UserAdminController created.");
	}
	
	private void saveAuditrail(HttpServletRequest request,UserAdmin userAdmin, UserActivity value)throws IOException, ServletException {
		log("UserAdminController method saveAuditrail: start...");
		UserAdmin user = commonUtils.getLoginUser();
		String ipAddress = CommonUtils.getRemoteIpAddress(request, isForwardedOn);
		log("UserAdminController method saveAuditrail get ipAddress : "+ipAddress);
		log("UserAdminController method saveAuditrail get userAdmin : "+userAdmin);
		log("UserAdminController method saveAuditrail get request.getRequestURI() : "+request.getRequestURI());
		AuditTrail auditTrail=auditService.saveAudit(user.getUserId(), value, new Date(), 
				String.format("%s (%s)", request.getRequestURI(), userAdmin), ipAddress);
		log("UserAdminController method saveAuditrail get auditTrail : "+auditTrail);
		log("UserAdminController method saveAuditrail: end...");
	}
	
	private void populateListOfAccessRoleItems(Model model) {
		log("UserAdminController method populateListOfAccessRoleItems: start...");
		List<AccessRole> list = accessRoleService.findAll();
		List<AccessRoleListItem> items = new LinkedList<AccessRoleListItem>();
		for ( AccessRole accessRole : list ) {
			items.add(new AccessRoleListItem( accessRole ) );
		}
		model.addAttribute("listOfAccessRoleItems", items ) ;
		log("UserAdminController method populateListOfAccessRoleItems: end...");
	}

	private void populateModel(Model model, UserAdmin userAdmin, FormMode formMode, HttpServletRequest request) {
		log("UserAdminController method populateModel: start...");
		model.addAttribute(MAIN_ENTITY_NAME, userAdmin);
		if ( formMode == FormMode.CREATE ) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE); 			
			//--- Other data useful in this screen in "create" mode (all fields)
			populateListOfAccessRoleItems(model);
		}
		else if ( formMode == FormMode.UPDATE ) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE); 			
			//--- Other data useful in this screen in "update" mode (only non-pk fields)
			populateListOfAccessRoleItems(model);
		}
		navigation.populateDefaultModel(model, request);
		log("UserAdminController method populateModel: end...");
	}

	@RequestMapping()
	public String list(Model model, HttpServletRequest request) {
		log("UserAdminController method list: start...");
		log("Action 'list'");
		List<UserAdmin> list = userAdminService.findAll();
		log("UserAdminController method list size : "+list.size());
		populateListOfAccessRoleItems(model);
		model.addAttribute(MAIN_LIST_NAME, list);	
		navigation.populateDefaultModel(model, request);
		log("UserAdminController method list: end...");
		return JSP_LIST;
	}

	@RequestMapping("/form")
	public String formForCreate(Model model, HttpServletRequest request) {
		log("Action 'formForCreate'");
		//--- Populates the model with a new instance
		UserAdmin userAdmin = new UserAdmin();	
		populateModel( model, userAdmin, FormMode.CREATE, request);
		return JSP_FORM;
	}
	
	@RequestMapping(value = "/form/{userId:.+}")
	public String formForUpdate(Model model, @PathVariable("userId") String userId, HttpServletRequest request ) {
		log("UserAdminController method formForUpdate: start...");
		log("UserAdminController method formForUpdate userId : "+userId);
		//--- Search the entity by its primary key and stores it in the model 
		UserAdmin userAdmin = userAdminService.findById(userId);
		log("UserAdminController method formForUpdate userAdmin : "+userAdmin);
		userAdmin.setAccessRoleId(userAdmin.getAccessRole().getAccessRoleId());
		populateModel( model, userAdmin, FormMode.UPDATE, request);		
		log("UserAdminController method formForUpdate: end...");
		return JSP_FORM;
	}

	@RequestMapping(value = "/create" ) // GET or POST
	public String create(@Valid UserAdmin userAdmin, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest, Authentication authentication) {
		log("UserAdminController method create: start...");
		log("UserAdminController method create userAdmin : "+userAdmin);
		try {
			if (!bindingResult.hasErrors()) {
				userAdmin.setCreatedBy(commonUtils.getLoginUser(authentication).getUserId());
				log("create get user id : "+commonUtils.getLoginUser(authentication).getUserId());
				userAdmin.setCreatedDate(new Date());
				userAdmin.setStatus(AppConstants.ACTIVE);
				AccessRole accessRole=accessRoleService.findById(userAdmin.getAccessRoleId());
				userAdmin.setAccessRole(accessRole);
				//check user id existing or not?
				UserAdmin userAdminBefore = userAdminService.findById(userAdmin.getUserId());
				UserAdmin userAdminCreated=null;
				if(userAdminBefore !=null){
					userAdmin.setUserId(userAdminBefore.getUserId());
					userAdminCreated = userAdminService.update(userAdmin);
				}else{
					userAdminCreated = userAdminService.create(userAdmin);
				}
//				UserAdmin userAdminCreated = userAdminService.create(userAdmin);
				saveAuditrail(httpServletRequest, userAdminCreated, UserActivity.SAVE_USER_MANAGEMENT);
				model.addAttribute(MAIN_ENTITY_NAME, userAdminCreated);
				//---
				log("UserAdminController method create: end...");
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				return redirectToForm(httpServletRequest, userAdmin.getUserId() );
			} else {
				populateModel( model, userAdmin, FormMode.CREATE, httpServletRequest);
				return JSP_FORM;
			}
		} catch(Exception e) {
			log("Action 'create' : Exception - " + e.getMessage() );
			messageHelper.addException(model, "userAdmin.error.create", e);
			populateModel( model, userAdmin, FormMode.CREATE, httpServletRequest);
			return JSP_FORM;
		}
	}

	@RequestMapping(value = "/update" ) // GET or POST
	public String update(@Valid UserAdmin userAdmin, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest,Authentication authentication) {
		log("UserAdminController method update: start...");
		log("UserAdminController method update userAdmin : "+userAdmin);
		try {
			if (!bindingResult.hasErrors()) {
				UserAdmin userDb = userAdminService.findById(userAdmin.getUserId());
				String passwordParam = userAdmin.getPassword();
				if(!passwordParam.equals(userDb.getPassword())){
					userAdmin.setPassword(PasswordUtil.generateEncryptPasswords(passwordParam));
				}
				userAdmin.setModifiedBy(commonUtils.getLoginUser().getUserId());
				userAdmin.setCreatedBy(commonUtils.getLoginUser().getUserId());
				userAdmin.setCreatedDate(userDb.getCreatedDate());
				userAdmin.setModifiedDate(new Date());
				userAdmin.setStatus(AppConstants.ACTIVE);
				userAdmin.setAccessRole(accessRoleService.findById(userAdmin.getAccessRoleId()));
				UserAdmin userAdminSaved = userAdminService.update(userAdmin);
				saveAuditrail(httpServletRequest, userAdminSaved, UserActivity.UPDATE_USER_MANAGEMENT);
				model.addAttribute(MAIN_ENTITY_NAME, userAdminSaved);
				//--- Set the result message
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				log("Action 'update' : update done - redirect");
				log("UserAdminController method update: end...");
				return redirectToForm(httpServletRequest, userAdmin.getUserId());
			} else {
				log("Action 'update' : binding errors");
				populateModel( model, userAdmin, FormMode.UPDATE, httpServletRequest);
				return JSP_FORM;
			}
		} catch(Exception e) {
			messageHelper.addException(model, "userAdmin.error.update", e);
			log("Action 'update' : Exception - " + e.getMessage() );
			populateModel( model, userAdmin, FormMode.UPDATE, httpServletRequest);
			return JSP_FORM;
		}
	}

	/**
	 * 'DELETE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param redirectAttributes
	 * @param userId  primary key element
	 * @return
	 */
	@RequestMapping(value = "/delete/{userId:.+}") // GET or POST
	public String delete(RedirectAttributes redirectAttributes,HttpServletRequest httpServletRequest,Authentication authentication ,@PathVariable("userId") String userId) {
		log("UserAdminController method delete: start...");
		log("UserAdminController method delete getUserLogin : "+commonUtils.getLoginUser().getUserId());
		log("UserAdminController method delete idUSerAdmin : "+userId);
		if(userId.equals(commonUtils.getLoginUser().getUserId())){
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.WARNING,"userAdmin.cannotDelete"));
			return redirectToList();
		}else{
			try {
				UserAdmin userAdmin =userAdminService.findById(userId);
				if(userAdmin!=null){
					userAdmin.setStatus(AppConstants.INACTIVE);
					AccessRole accessRole=accessRoleService.findById(AppConstants.NO_ROLE_ID);
					userAdmin.setAccessRole(accessRole);
					userAdmin.setAccessRoleId(accessRole.getAccessRoleId());
					userAdminService.updateStatus(userAdmin);	
				}
				saveAuditrail(httpServletRequest, userAdmin, UserActivity.DELETE_USER_MANAGEMENT);
				//--- Set the result message
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
			} catch(Exception e) {
				log("Error when delete user = " + ExceptionUtils.getFullStackTrace(e));
				messageHelper.addException(redirectAttributes, "userAdmin.error.delete", e);
			}	
			log("UserAdminController method delete: delete...");
			return redirectToList();
		}
	}

	@RequestMapping(value = "/datatableJson", method = RequestMethod.GET)
	public @ResponseBody DataTableResponse<UserAdmin> getDataTableJson(@Valid DataTableRequest dataTableRequest, BindingResult bindingResult, HttpServletRequest request, Model model){
		log("getDataTableJson start here ....");

		String userNameFilter = ParamUtil.getString(request, "userName");
		
		log("getDataTableJson getting name from input ..." + userNameFilter);
		
		Long roleNameFilter = ParamUtil.getLong(request, "roleName");
		
		log("getDataTableJson getting roleName from input ..." + roleNameFilter);
		
		int pageSize = 10;
		if(dataTableRequest.getiDisplayLength() > 0){
			pageSize = dataTableRequest.getiDisplayLength();
		}
		
		DataTableResponse<UserAdmin> response = new DataTableResponse<UserAdmin>();
		String sortedColumn = UserAdminIndexEnum.getMaps().get(dataTableRequest.getiSortedColumnIndex());
		Direction sort = Sort.Direction.ASC;
		if(dataTableRequest.getsSortDirection().equals("desc")){
			sort = Sort.Direction.DESC;
		}
		Pageable pageable = new PageRequest(dataTableRequest.getPageNumber(), pageSize, sort, 
				sortedColumn);

		UserAdminSpecifications spec = new UserAdminSpecifications();
		if(userNameFilter != null && !userNameFilter.isEmpty()){
			spec.setNameFilter(userNameFilter);
		}
		if(roleNameFilter != null){
			spec.setAccessRoleFilter(roleNameFilter);
				
		}

		Long totalRecord = userAdminService.countWithSpec(spec);

		log("getDataTableJson getting totalRecord value from userAdmin ..." + totalRecord.toString());
		
		if (totalRecord.intValue() > 0) {
			if (dataTableRequest.getiDisplayLength() < totalRecord.intValue()) {
				pageSize = dataTableRequest.getiDisplayLength();
			} else {
				pageSize = totalRecord.intValue();
			}
		}
		
		List<UserAdmin> pageResult = userAdminService.findWithSpec(spec, pageable);
		response.setDraw(dataTableRequest.getsEcho());
		response.setRecordsFiltered(totalRecord.intValue());
		response.setRecordsTotal(totalRecord.intValue());
		
		int page=pageSize*dataTableRequest.getPageNumber();
		int no=page;
		for (int i = pageResult.size()-pageResult.size(); i < pageResult.size(); i++) {
			no=no+1;
			pageResult.get(i).setNo(no);
		}
		response.setData(pageResult);

		
		log("getDataTableJson end here ....");
		
		return response;
	}
}
