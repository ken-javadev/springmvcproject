/*
 * Created on 7 Oct 2017 ( Time 18:41:59 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a composite Primary Key  


package com.gvpt.admintool.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;


import javax.persistence.*;

/**
 * Persistent class for entity stored in table "GVPT_CODE_CONFIG"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="GVPT_CODE_CONFIG")
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="CodeConfigEntity.countAll", query="SELECT COUNT(x) FROM CodeConfigEntity x" )
} )
public class CodeConfigEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )  
    //----------------------------------------------------------------------
	@EmbeddedId
    private CodeConfigEntityKey compositePrimaryKey ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="CODE_VALUE", length=100)
    private String     codeValue    ;

    @Column(name="STATUS")
    private Long       status       ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------

    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public CodeConfigEntity() {
		super();
		this.compositePrimaryKey = new CodeConfigEntityKey();       
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
    public void setCodeConfigId( Long codeConfigId ) {
        this.compositePrimaryKey.setCodeConfigId( codeConfigId ) ;
    }
    public Long getCodeConfigId() {
        return this.compositePrimaryKey.getCodeConfigId() ;
    }
    public void setCodeType( String codeType ) {
        this.compositePrimaryKey.setCodeType( codeType ) ;
    }
    public String getCodeType() {
        return this.compositePrimaryKey.getCodeType() ;
    }
    public void setCodeName( String codeName ) {
        this.compositePrimaryKey.setCodeName( codeName ) ;
    }
    public String getCodeName() {
        return this.compositePrimaryKey.getCodeName() ;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : CODE_VALUE ( VARCHAR2 ) 
    public void setCodeValue( String codeValue ) {
        this.codeValue = codeValue;
    }
    public String getCodeValue() {
        return this.codeValue;
    }

    //--- DATABASE MAPPING : STATUS ( NUMBER ) 
    public void setStatus( Long status ) {
        this.status = status;
    }
    public Long getStatus() {
        return this.status;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        if ( compositePrimaryKey != null ) {  
            sb.append(compositePrimaryKey.toString());  
        }  
        else {  
            sb.append( "(null-key)" ); 
        }  
        sb.append("]:"); 
        sb.append(codeValue);
        sb.append("|");
        sb.append(status);
        return sb.toString(); 
    } 

}
